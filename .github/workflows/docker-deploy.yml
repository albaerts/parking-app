name: CI / Build, Publish Images & Deploy

on:
  push:
    branches: [ main ]

env:
  IMAGE_TAG: ${{ github.sha }}
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    name: Build and push Docker images to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/parking-backend:${{ env.IMAGE_TAG }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/parking-frontend:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to Server (pull images & up)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check deploy secrets
        run: |
          # At job runtime we can read secrets; fail with a clear message if any are missing.
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ] || [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.REMOTE_PATH }}" ]; then
            echo "Required deploy secrets are missing. Ensure SSH_PRIVATE_KEY, SSH_HOST and REMOTE_PATH are set in repository secrets." >&2
            exit 1
          fi

      - name: Run remote deploy script
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Fail early and print commands for easier debugging on CI
            set -euxo pipefail

            cd ${{ secrets.REMOTE_PATH }}
            echo "Running remote deploy helper: ./deploy/update.sh ${{ env.IMAGE_TAG }}"

            # If a GHCR PAT was provided as a secret, login to GHCR so the remote host
            # can pull private images. This is optional but recommended when images
            # are pushed to ghcr.io and the remote is not logged in.
            if [ -n "${{ secrets.GHCR_PAT }}" ]; then
              echo "Logging in to ghcr.io as ${{ github.actor }}"
              echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || true
            else
              echo "No GHCR_PAT secret found — skipping docker login on remote host"
            fi

            # Ensure the checked-out repo on the remote is up-to-date so changes
            # committed to files like deploy/nginx.conf are present before we run
            # the deploy helper. This is a safe, non-fatal update: if git isn't
            # present or the repo has diverged, we continue but log the output.
            if [ -d .git ]; then
              echo "Updating remote checkout to origin/main"
              git fetch --all --prune || true
              git reset --hard origin/main || true
            else
              echo "No .git directory found at ${{ secrets.REMOTE_PATH }} - skipping git update"
            fi

            # Ensure deploy script is executable and run it
            chmod +x ./deploy/update.sh || true
            ./deploy/update.sh ${{ env.IMAGE_TAG }}

            # Optional public post-deploy sanity check (requires curl on the server)
            if command -v curl >/dev/null 2>&1; then
              echo "Running public site sanity check..."
              HTTP=$(curl -s -o /dev/null -w "%{http_code}" "https://parking.gashis.ch/parking/" || echo "000")
              echo "public_site_status=$HTTP"
              # Accept 200 OK or 301 redirect (we redirect /parking -> /)
              if [ "$HTTP" != "200" ] && [ "$HTTP" != "301" ]; then
                echo "Public site check failed (status=$HTTP)" >&2
                exit 3
              fi
            else
              echo "curl not available on remote host — skipping public site check"
            fi
